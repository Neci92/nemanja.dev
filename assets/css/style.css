@import url(https://fonts.googleapis.com/css2?family=Racing+Sans+One&display=swap);a,abbr,acronym,address,applet,article,aside,audio,b,big,blockquote,body,canvas,caption,center,cite,code,dd,del,details,dfn,div,dl,dt,em,embed,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,header,hgroup,html,i,iframe,img,ins,kbd,label,legend,li,mark,menu,nav,object,ol,output,p,pre,q,ruby,s,samp,section,small,span,strike,strong,sub,summary,sup,table,tbody,td,tfoot,th,thead,time,tr,tt,u,ul,var,video{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}:focus{outline:0}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:after,blockquote:before,q:after,q:before{content:'';content:none}table{border-collapse:collapse;border-spacing:0}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration,input[type=search]::-webkit-search-results-button,input[type=search]::-webkit-search-results-decoration{-webkit-appearance:none;-moz-appearance:none}input[type=search]{-webkit-appearance:none;-moz-appearance:none;box-sizing:content-box}textarea{overflow:auto;vertical-align:top;resize:vertical}audio,canvas,video{display:inline-block;max-width:100%}audio:not([controls]){display:none;height:0}[hidden]{display:none}html{font-size:100%;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%}a:focus{outline:thin dotted}a:active,a:hover{outline:0}img{border:0;-ms-interpolation-mode:bicubic}figure{margin:0}form{margin:0}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0;white-space:normal}button,input,select,textarea{font-size:100%;margin:0;vertical-align:baseline}button,input{line-height:normal}button,select{text-transform:none}button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0}input[type=search]{-webkit-appearance:textfield;box-sizing:content-box}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}textarea{overflow:auto;vertical-align:top}table{border-collapse:collapse;border-spacing:0}button,html,input,select,textarea{color:#222}::-moz-selection{background:#b3d4fc;text-shadow:none}::selection{background:#b3d4fc;text-shadow:none}img{vertical-align:middle}fieldset{border:0;margin:0;padding:0}textarea{resize:vertical}.chromeframe{margin:.2em 0;background:#ccc;color:#000;padding:.2em 0}html{font-size:10px}body{background-color:#202224;color:#ccc}.container{max-width:1440px;margin:0 auto;padding:0 50px}@media (max-width:600px){.container{padding:0 20px}}.container--narrow{max-width:1000px}.noscroll{overflow:hidden}.navigation__list{display:flex}.navigation__list-item{margin-left:20px}.navigation__list-item:hover .navigation__link-text{top:50%}.navigation__link-text{font-family:'Racing Sans One',cursive;background:linear-gradient(90.86deg,#e85d54 0,#da3f5b 99.85%);-webkit-text-fill-color:transparent;-webkit-background-clip:text;letter-spacing:.035rem;padding:0 1rem;transition:.3s;position:absolute;top:-50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);font-size:4rem}.header{position:relative;display:flex;justify-content:space-between;padding:1.5rem 4rem;box-shadow:3px 3px 4px rgba(0,0,0,.849),-3px -3px 4px rgba(102,107,112,.43);border-radius:0 0 35px 35px}.header__logo:hover .header__logo-text{top:50%}.header__logo-text{font-family:'Racing Sans One',cursive;background:linear-gradient(90.86deg,#e85d54 0,#da3f5b 99.85%);-webkit-text-fill-color:transparent;-webkit-background-clip:text;letter-spacing:.035rem;padding:0 1rem;transition:.3s;position:absolute;top:-50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);font-size:4rem}.button--icon{padding:5px;border-radius:50%;box-shadow:3px 3px 4px rgba(0,0,0,.849),-3px -3px 4px rgba(102,107,112,.43);display:block}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
